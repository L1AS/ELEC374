ORG:    ldi    R2, 0x69        ; R2 = 0x69
        ldi    R2, 2(R2)       ; R2 = 0x6B
        ldi    R1, 0x47        ; R1 = 0x47
        ldi    R1, 1(R1)       ; R1 = 0x95
        ldi    R0, 7(R1)       ; R0 = 0x34
        ldi    R3, 3           ; R3 = 3
        ldi    R2, 0x43        ; R2 = 0x43
        brmi   R2, 3           ; continue with the next instruction (will not branch)
        ldi    R2, 6(R2)       ; R2 = 0x49
        ldi    R7, -2(R2)      ; R7 = (0x49 - 2) = 0x94
        nop
        brpl   R7, 2           ; continue with the instruction at “target” (will branch)
        ldi    R4, 2(R3)       ; this instruction will not execute
target: ldi    R4, -3(R5)      ; this instruction will not execute
        add    R2, R2, R3      ; R2 = 0x4C
        addi   R7, R7, 3       ; R7 = 0x97
        neg    R7              ; R7 = 0xFFFFF169
        not    R7, R7          ; R7 = 0x96
        andi   R7, R7, 0x0F    ; R7 = 6
        ori    R7, R1, 0x9     ; R7 = 0x80000006
        ori    R7, R1, 9       ; R7 = 0x8000000F
        shra   R1, R1, 3       ; R1 = 0x8000000F
        shr    R2, R2, R3      ; new value in memory with address 0x8E
        ror    R2, R0, R3      ; R2 = 0x9
        rol    R2, R0, R3      ; R2 = 0x140
        or     R4, R3, R2      ; R4 = 0xA3
        and    R1, R2, R0      ; R1 = 0x20
        st     0x47(R1), R4    ; new value in memory with address 0x47
        sub    R1, R2, R3      ; R1 = 0x609
        sbi    R4, R4, 1       ; R4 = 0x60
        ldi    R5, 0x1B        ; R5 = 0x1B
        ldi    R4, 0xA2        ; R4 = 0xA2
        mfs    R6              ; R6 = 0
        mfi    R7              ; R7 = 0xA2
        div    R5, R4          ; H = 0, L = 4
        ldi    R10, 1(R4)      ; setting up argument registers
        ldi    R11, -2(R5)     ; R11 = 0x9
        ldi    R12, 0(R6)      ; R12 = 0xA2
        ldi    R13, 3(R7)      ; R13 = 0x3
        call   R12             ; address of subroutine subA in R12 - return address in R15
0x29:   halt                   ; 0x29 upon return, the program halts

subA:   ORG 0xA2
0xA2:   add    R9, R10, R12    ;  R8 and R9 are return value registers
        sub    R8, R11, R13    ; R9 = 0x9, R8 = 0x16
        sub    R9, R9, R8      ; R9 = 0x93
        sbi    R5              ; return from procedure
